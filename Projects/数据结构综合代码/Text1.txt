#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#define MAX 20
typedef char VertexType;
typedef int AdjMtrix[MAX][MAX];
typedef struct{
	int vexnum,arcnum;
	VertexType vexs[MAX];
	AdjMtrix arcs;
}MGraph;

typedef struct ArcNode{
	int adjvex;
	struct ArcNode *nextarc;
}ArcNode;
typedef struct VNode{
	char data;
	ArcNode *firstarc;
}VNode,AdjList[MAX];
typedef struct {
	AdjList vertices;
	int vexnum,arcnum;
}ALGraph;
 
int LocateVex(ALGraph G,char v){
	for(int i=0;i<G.vexnum;i++)
 		if(G.vertices[i].data==v)
 			return i;
		return -1;
 }
void CreateList(ALGraph &G){
 	//建立图的邻接表
 	int i,j,k;
 	char v1,v2;
 	ArcNode *s,*p;
	 printf("输入图的顶点数:");
	 scanf("%d",G.vexnum);
	 printf("输入图的弧数:");
	 scanf("%d",G.arcnum);
	 for(i=0;i<G.vexnum;i++){
	 	scanf("%c",G.vertices[i].data);
	 	G.vertices[i].firstarc=NULL;
	 }
	 printf("输入两点之间的边:\n");
	 for(k=0;k<G.arcnum;k++){
	 	scanf("%c%c",&v1,&v2);
	 	i=LocateVex(G,v1);
	 	j=LocateVex(G,v2);
	 	s=(ArcNode *)malloc(sizeof(ArcNode));
	 	s->adjvex=j;
	 	s->nextarc=NULL;
	 	p=G.vertices[i].firstarc;
	 	if(!p)
	 	G.vertices[i].firstarc=s;
	 	while(p->nextarc)
	 		p=p->nextarc;
	 		p->nextarc=s;
	 }
 }
 
int LocateVex(MGraph &G,char v){
	for(int i=0;i<G.vexnum;i++)
		if(G.vexs[i]==v)
			return i;
	    return -1;
}
void ALChangeToAM(ALGraph G1,MGraph &G2){
	//将图的邻接表转化成邻接矩阵
	int i,j,k;
	ArcNode *p;
	for(i=0;i<G1.vexnum;i++)
		for(j=0;j<G2.vexnum;j++)
			G2.arcs[i][j]=0;          //初始化邻接矩阵
		for(i=0;i<G1.vexnum;i++){
			p=G1.vertices[i].firstarc;
			while(p)
			{
				j=p->adjvex;
				G2.arcs[i][j]=1;
				p=p->nextarc;
			}
		}
}

/*
void CreateUDN(MGraph &G){
	//建立无向图的邻接矩阵
	char v1,v2;
	int i,j,k; 
	printf("输入当前顶点数:");
	scanf("%d",&G.vexnum);
	printf("输入当前弧数:");
	scanf("%d",&G.arcnum);
	printf("输入当前顶点向量:\n");
	for(i=0;i<G.vexnum;i++)
		scanf("%c",&G.vexs[i]);
		getchar();
	 for(i=0;i<G.vexnum;i++)
	 	for(j=0;j<G.vexnum;j++)
	 		G.arcs[i][j]=0;
	printf("输入边:\n");
	for(k=0;k<G.arcnum;k++){
		scanf("%c%c",&v1,&v2);
		getchar();
		i=LocateVex(G,v1);
		j=LocateVex(G,v2);
		G.arcs[i][j]=G.arcs[j][i]=1;
	}
/*	for(i=0;i<G.vexnum;i++){
		for(j=0;j<G.vexnum;j++)
			printf("%d",G.arcs[i][j]);
			printf("\n");
		}
}
*/
void Output(MGraph G){
	int i,j,k;
	for(i=0;i<G.vexnum;i++){
		for(j=0;j<G.vexnum;j++)
			printf("%d",G.arcs[i][j]);
		printf("\n");
	}
}
int main()
{
	ALGraph G1;
	MGraph G2;
	CreateList(G1);
	ALChangeToAM(G1,G2);
	Output(G2);
	return 0;
}