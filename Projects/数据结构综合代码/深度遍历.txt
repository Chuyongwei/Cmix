#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#define MAX 20
typedef struct ArcNode{
	int adjvex;
	struct ArcNode *nextarc;
}ArcNode;
typedef struct VNode{
	char data;
	ArcNode *firstarc;
}VNode,AdjList[MAX];
typedef struct {
	AdjList vertices;
	int vexnum,arcnum;
}ALGraph;

int visited[MAX];

int LocateVex(ALGraph G,char v){
	for(int i=0;i<G.vexnum;i++)
		if(G.vertices[i].data==v)
			return i;
		return -1;
}
/*
void CreateALGraph(ALGraph &G){
	//创建图的邻接表
	int i,j,k;
	char v1,v2;
	ArcNode *p;
	printf("输入图的顶点数和弧数：\n");
	scanf("%d%d",&G.vexnum,&G.arcnum);
	printf("输入图中的顶点信息:\n");
	for(i=0;i<G.vexnum;i++){
		scanf("%c",&G.vertices[i].data);
		getchar();
		G.vertices[i].firstarc=NULL;
	}
	printf("输入图中的边:\n");
	for(i=0;i<G.arcnum;i++)
	{
		scanf("%c%c",&v1,&v2);
		getchar();
		i=LocateVex(G,v1);
		j=LocateVex(G,v2);
		p=(ArcNode*)malloc(sizeof(ArcNode));
		p->adjvex=j;
		p->nextarc=G.vertices[i].firstarc;
		G.vertices[i].firstarc=p;
	}
	return;
}*/

void CreateALGraph(ALGraph &G){
 	//建立图的邻接表
 	int i,j,k;
 	char v1,v2;
 	ArcNode *s,*p;
	 printf("输入图的顶点数:");
	 scanf("%d",&G.vexnum);
	 printf("输入图的弧数:");
	 scanf("%d",&G.arcnum);
	 printf("输入顶点:\n");
	 for(i=0;i<G.vexnum;i++){
	 	scanf("%c",&G.vertices[i].data);
		getchar();
	 	G.vertices[i].firstarc=NULL;
	 }
	 printf("输入两点之间的边:\n");
	 for(k=0;k<G.arcnum;k++)  
    {//输入边   
        scanf("%c %c",&v1,&v2);  
        getchar();  
        i=LocateVex(G,v1);  
        j=LocateVex(G,v2);  
        s= (ArcNode *)malloc(sizeof(ArcNode));  
        s->adjvex=j;  
        s->nextarc=NULL;  
        p=G.vertices[i].firstarc;  
        if(!p)  
        {  
            G.vertices[i].firstarc = s;  
        }  
        else  
        {  
            while(p->nextarc)  
                p=p->nextarc;  
            p->nextarc=s;  
        }  
    }  
}

void DFS(ALGraph &G,int v){
	ArcNode *p;
	printf("%c",G.vertices[v].data);
	visited[v]=1;
	p=G.vertices[v].firstarc;
	while(p){
		if(!visited[p->adjvex])
		DFS(G,p->adjvex);
		p=p->nextarc;
	}
}

void DFSTraverse(ALGraph &G){
	for(int i=0;i<G.vexnum;i++)
		visited[i]=0;
	for(int i=0;i<G.vexnum;i++)
		if(!visited[i])
			DFS(G,i);
}

int main()
{
	ALGraph G;
	CreateALGraph(G);
	DFSTraverse(G);
	return 0;
}